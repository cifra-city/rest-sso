/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoginData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginData{}

// LoginData struct for LoginData
type LoginData struct {
	Type string `json:"type"`
	Attributes LoginDataAttributes `json:"attributes"`
}

type _LoginData LoginData

// NewLoginData instantiates a new LoginData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginData(type_ string, attributes LoginDataAttributes) *LoginData {
	this := LoginData{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewLoginDataWithDefaults instantiates a new LoginData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginDataWithDefaults() *LoginData {
	this := LoginData{}
	return &this
}

// GetType returns the Type field value
func (o *LoginData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LoginData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LoginData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *LoginData) GetAttributes() LoginDataAttributes {
	if o == nil {
		var ret LoginDataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *LoginData) GetAttributesOk() (*LoginDataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *LoginData) SetAttributes(v LoginDataAttributes) {
	o.Attributes = v
}

func (o LoginData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *LoginData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginData := _LoginData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginData)

	if err != nil {
		return err
	}

	*o = LoginData(varLoginData)

	return err
}

type NullableLoginData struct {
	value *LoginData
	isSet bool
}

func (v NullableLoginData) Get() *LoginData {
	return v.value
}

func (v *NullableLoginData) Set(val *LoginData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginData(val *LoginData) *NullableLoginData {
	return &NullableLoginData{value: val, isSet: true}
}

func (v NullableLoginData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


