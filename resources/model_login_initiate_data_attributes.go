/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoginInitiateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginInitiateDataAttributes{}

// LoginInitiateDataAttributes struct for LoginInitiateDataAttributes
type LoginInitiateDataAttributes struct {
	// User email
	Email string `json:"email"`
	// First password
	Password string `json:"password"`
}

type _LoginInitiateDataAttributes LoginInitiateDataAttributes

// NewLoginInitiateDataAttributes instantiates a new LoginInitiateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginInitiateDataAttributes(email string, password string) *LoginInitiateDataAttributes {
	this := LoginInitiateDataAttributes{}
	this.Email = email
	this.Password = password
	return &this
}

// NewLoginInitiateDataAttributesWithDefaults instantiates a new LoginInitiateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginInitiateDataAttributesWithDefaults() *LoginInitiateDataAttributes {
	this := LoginInitiateDataAttributes{}
	return &this
}

// GetEmail returns the Email field value
func (o *LoginInitiateDataAttributes) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *LoginInitiateDataAttributes) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *LoginInitiateDataAttributes) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *LoginInitiateDataAttributes) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *LoginInitiateDataAttributes) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *LoginInitiateDataAttributes) SetPassword(v string) {
	o.Password = v
}

func (o LoginInitiateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginInitiateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *LoginInitiateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginInitiateDataAttributes := _LoginInitiateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginInitiateDataAttributes)

	if err != nil {
		return err
	}

	*o = LoginInitiateDataAttributes(varLoginInitiateDataAttributes)

	return err
}

type NullableLoginInitiateDataAttributes struct {
	value *LoginInitiateDataAttributes
	isSet bool
}

func (v NullableLoginInitiateDataAttributes) Get() *LoginInitiateDataAttributes {
	return v.value
}

func (v *NullableLoginInitiateDataAttributes) Set(val *LoginInitiateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginInitiateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginInitiateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginInitiateDataAttributes(val *LoginInitiateDataAttributes) *NullableLoginInitiateDataAttributes {
	return &NullableLoginInitiateDataAttributes{value: val, isSet: true}
}

func (v NullableLoginInitiateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginInitiateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


