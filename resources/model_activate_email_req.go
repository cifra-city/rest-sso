/*
Example API

This is a sample API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivateEmailReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivateEmailReq{}

// ActivateEmailReq struct for ActivateEmailReq
type ActivateEmailReq struct {
	Data ActivateEmailData `json:"data"`
}

type _ActivateEmailReq ActivateEmailReq

// NewActivateEmailReq instantiates a new ActivateEmailReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateEmailReq(data ActivateEmailData) *ActivateEmailReq {
	this := ActivateEmailReq{}
	this.Data = data
	return &this
}

// NewActivateEmailReqWithDefaults instantiates a new ActivateEmailReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateEmailReqWithDefaults() *ActivateEmailReq {
	this := ActivateEmailReq{}
	return &this
}

// GetData returns the Data field value
func (o *ActivateEmailReq) GetData() ActivateEmailData {
	if o == nil {
		var ret ActivateEmailData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ActivateEmailReq) GetDataOk() (*ActivateEmailData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ActivateEmailReq) SetData(v ActivateEmailData) {
	o.Data = v
}

func (o ActivateEmailReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivateEmailReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ActivateEmailReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivateEmailReq := _ActivateEmailReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivateEmailReq)

	if err != nil {
		return err
	}

	*o = ActivateEmailReq(varActivateEmailReq)

	return err
}

type NullableActivateEmailReq struct {
	value *ActivateEmailReq
	isSet bool
}

func (v NullableActivateEmailReq) Get() *ActivateEmailReq {
	return v.value
}

func (v *NullableActivateEmailReq) Set(val *ActivateEmailReq) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateEmailReq) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateEmailReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateEmailReq(val *ActivateEmailReq) *NullableActivateEmailReq {
	return &NullableActivateEmailReq{value: val, isSet: true}
}

func (v NullableActivateEmailReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateEmailReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


