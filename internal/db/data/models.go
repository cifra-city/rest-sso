// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package data

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type FailureReason string

const (
	FailureReasonInvalidPassword        FailureReason = "invalid_password"
	FailureReasonAccountLocked          FailureReason = "account_locked"
	FailureReasonExpiredToken           FailureReason = "expired_token"
	FailureReasonInvalidDeviceID        FailureReason = "invalid_device_id"
	FailureReasonInvalidRefreshToken    FailureReason = "invalid_refresh_token"
	FailureReasonInvalidDeviceFactoryID FailureReason = "invalid_device_factory_id"
	FailureReasonInvalidUserID          FailureReason = "invalid_user_id"
	FailureReasonTooManyAttempts        FailureReason = "too_many_attempts"
	FailureReasonSuccess                FailureReason = "success"
)

func (e *FailureReason) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FailureReason(s)
	case string:
		*e = FailureReason(s)
	default:
		return fmt.Errorf("unsupported scan type for FailureReason: %T", src)
	}
	return nil
}

type NullFailureReason struct {
	FailureReason FailureReason
	Valid         bool // Valid is true if FailureReason is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFailureReason) Scan(value interface{}) error {
	if value == nil {
		ns.FailureReason, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FailureReason.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFailureReason) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FailureReason), nil
}

type RoleType string

const (
	RoleTypeAdmin      RoleType = "admin"
	RoleTypeUser       RoleType = "user"
	RoleTypeVerifyUser RoleType = "verify_user"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type Device struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	FactoryID  string
	DeviceName sql.NullString
	OsVersion  sql.NullString
	CreatedAt  time.Time
	LastUsed   time.Time
}

type LoginHistory struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	DeviceID      uuid.UUID
	IpAddress     string
	LoginTime     time.Time
	Success       bool
	FailureReason NullFailureReason
}

type RefreshToken struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	CreatedAt time.Time
	ExpiresAt time.Time
	DeviceID  uuid.UUID
	IpAddress string
}

type UsersSecret struct {
	ID           uuid.UUID
	Username     string
	Email        string
	Role         RoleType
	PassHash     string
	TokenVersion int32
}
