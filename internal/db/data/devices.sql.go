// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package data

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countDevicesByUserID = `-- name: CountDevicesByUserID :one
SELECT COUNT(*) FROM devices
WHERE user_id = $1
`

func (q *Queries) CountDevicesByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDevicesByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const deleteDevicesByUserID = `-- name: DeleteDevicesByUserID :exec
DELETE FROM devices
WHERE user_id = $1
`

func (q *Queries) DeleteDevicesByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDevicesByUserID, userID)
	return err
}

const deleteOldDevices = `-- name: DeleteOldDevices :exec
DELETE FROM devices
WHERE last_used < NOW() - INTERVAL '1 year'
`

func (q *Queries) DeleteOldDevices(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldDevices)
	return err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, user_id, device_id, device_name, os_version, created_at, last_used FROM devices
WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.OsVersion,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const getDevicesByUserID = `-- name: GetDevicesByUserID :many
SELECT id, user_id, device_id, device_name, os_version, created_at, last_used FROM devices
WHERE user_id = $1
ORDER BY last_used DESC
`

func (q *Queries) GetDevicesByUserID(ctx context.Context, userID uuid.UUID) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevicesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceID,
			&i.DeviceName,
			&i.OsVersion,
			&i.CreatedAt,
			&i.LastUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnusedDevices = `-- name: GetUnusedDevices :many
SELECT id, user_id, device_id, device_name, os_version, created_at, last_used FROM devices
WHERE last_used < NOW() - INTERVAL '30 days'
`

func (q *Queries) GetUnusedDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getUnusedDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceID,
			&i.DeviceName,
			&i.OsVersion,
			&i.CreatedAt,
			&i.LastUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithManyDevices = `-- name: GetUsersWithManyDevices :many
SELECT user_id, COUNT(*) as device_count
FROM devices
GROUP BY user_id
HAVING COUNT(*) > $1
ORDER BY device_count DESC
`

type GetUsersWithManyDevicesRow struct {
	UserID      uuid.UUID
	DeviceCount int64
}

func (q *Queries) GetUsersWithManyDevices(ctx context.Context, dollar_1 interface{}) ([]GetUsersWithManyDevicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithManyDevices, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithManyDevicesRow
	for rows.Next() {
		var i GetUsersWithManyDevicesRow
		if err := rows.Scan(&i.UserID, &i.DeviceCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDevice = `-- name: InsertDevice :exec
INSERT INTO devices (id, user_id, device_id, device_name, os_version, created_at, last_used)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertDeviceParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	DeviceID   string
	DeviceName sql.NullString
	OsVersion  sql.NullString
	CreatedAt  time.Time
	LastUsed   time.Time
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) error {
	_, err := q.db.ExecContext(ctx, insertDevice,
		arg.ID,
		arg.UserID,
		arg.DeviceID,
		arg.DeviceName,
		arg.OsVersion,
		arg.CreatedAt,
		arg.LastUsed,
	)
	return err
}

const updateDeviceName = `-- name: UpdateDeviceName :exec
UPDATE devices
SET device_name = $2
WHERE id = $1
`

type UpdateDeviceNameParams struct {
	ID         uuid.UUID
	DeviceName sql.NullString
}

func (q *Queries) UpdateDeviceName(ctx context.Context, arg UpdateDeviceNameParams) error {
	_, err := q.db.ExecContext(ctx, updateDeviceName, arg.ID, arg.DeviceName)
	return err
}

const updateLastUsed = `-- name: UpdateLastUsed :exec
UPDATE devices
SET last_used = $2
WHERE id = $1
`

type UpdateLastUsedParams struct {
	ID       uuid.UUID
	LastUsed time.Time
}

func (q *Queries) UpdateLastUsed(ctx context.Context, arg UpdateLastUsedParams) error {
	_, err := q.db.ExecContext(ctx, updateLastUsed, arg.ID, arg.LastUsed)
	return err
}
