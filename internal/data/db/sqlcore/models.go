// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlcore

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type FailureReason string

const (
	FailureReasonInvalidPassword        FailureReason = "invalid_password"
	FailureReasonAccountLocked          FailureReason = "account_locked"
	FailureReasonExpiredToken           FailureReason = "expired_token"
	FailureReasonInvalidDeviceID        FailureReason = "invalid_device_id"
	FailureReasonInvalidRefreshToken    FailureReason = "invalid_refresh_token"
	FailureReasonInvalidDeviceFactoryID FailureReason = "invalid_device_factory_id"
	FailureReasonInvalidUserID          FailureReason = "invalid_user_id"
	FailureReasonTooManyAttempts        FailureReason = "too_many_attempts"
	FailureReasonNoAccess               FailureReason = "no_access"
	FailureReasonSuccess                FailureReason = "success"
)

func (e *FailureReason) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FailureReason(s)
	case string:
		*e = FailureReason(s)
	default:
		return fmt.Errorf("unsupported scan type for FailureReason: %T", src)
	}
	return nil
}

type NullFailureReason struct {
	FailureReason FailureReason
	Valid         bool // Valid is true if FailureReason is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFailureReason) Scan(value interface{}) error {
	if value == nil {
		ns.FailureReason, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FailureReason.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFailureReason) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FailureReason), nil
}

type OperationType string

const (
	OperationTypeLogin            OperationType = "login"
	OperationTypeRefreshToken     OperationType = "refresh_token"
	OperationTypeChangeUsername   OperationType = "change_username"
	OperationTypeChangePassword   OperationType = "change_password"
	OperationTypeResetPassword    OperationType = "reset_password"
	OperationTypeChangeEmail      OperationType = "change_email"
	OperationTypeDeleteAccount    OperationType = "delete_account"
	OperationTypeDeleteSession    OperationType = "delete_session"
	OperationTypeTerminateSession OperationType = "terminate_session"
)

func (e *OperationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationType(s)
	case string:
		*e = OperationType(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationType: %T", src)
	}
	return nil
}

type NullOperationType struct {
	OperationType OperationType
	Valid         bool // Valid is true if OperationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationType) Scan(value interface{}) error {
	if value == nil {
		ns.OperationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationType), nil
}

type RoleType string

const (
	RoleTypeAdmin      RoleType = "admin"
	RoleTypeUser       RoleType = "user"
	RoleTypeVerifyUser RoleType = "verify_user"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type Account struct {
	ID        uuid.UUID
	Email     string
	PassHash  string
	Role      RoleType
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Operation struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	Operation     OperationType
	DeviceData    json.RawMessage
	Success       bool
	FailureReason NullFailureReason
	CreatedAt     time.Time
}

type Session struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Token      string
	DeviceName string
	Client     string
	Ip         string
	CreatedAt  time.Time
	LastUsed   time.Time
}
